{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","match","useRouteMatch","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","path","list","map","quote","NoQuotesFound","noquotes","AllQuote","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCkBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,MAA3C,iC,iBC0CSO,EArCG,SAACR,GACjB,IAZkBS,EAAQC,EAYpBC,EAAUC,cACVC,EAAWC,cACXC,EAAQC,cAGRC,EAAiD,QADnC,IAAIC,gBAAgBL,EAASM,QACVC,IAAI,QAErCC,GAnBYZ,EAmBcT,EAAMS,OAnBZC,EAmBoBO,EAlBvCR,EAAOa,MAAK,SAACC,EAAQC,GAC1B,OAAId,EACKa,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,EAE7BgB,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,MAwBxC,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQuB,QAAxB,SACE,yBAAQC,QAXe,WAE3Bf,EAAQgB,KAAK,CACXC,SAAUb,EAAMc,KAChBV,OAAO,SAAD,OAAYF,EAAqB,OAAS,UAO9C,kBAA6CA,EAAqB,aAAgB,iBAEpF,oBAAIhB,UAAWC,IAAQ4B,KAAvB,SACGT,EAAaU,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEzB,GAAIyB,EAAMzB,GACVF,OAAQ2B,EAAM3B,OACdD,KAAM4B,EAAM5B,MAHP4B,EAAMzB,a,yBC7BR0B,EAXO,WACpB,OACE,sBAAKhC,UAAWC,IAAQgC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMjC,UAAU,MAAMK,GAAG,aAAzB,6B,gBC+BS6B,UAxBE,WACb,MAA0DC,YAAQC,KAAc,GAAxEC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcC,EAAnC,EAA6BC,KAAoBC,EAAjD,EAAiDA,MAMjD,OAJAC,qBAAU,WACNL,MACD,CAACA,IAEU,YAAXC,EACQ,qBAAKtC,UAAU,WAAf,SACH,cAAC2C,EAAA,EAAD,MAILF,EACQ,mBAAGzC,UAAU,iBAAb,SAA+ByC,IAG5B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAIrD,cAAC,EAAD,CAAWpC,OAAQ+B,IAHf,cAAC,EAAD","file":"static/js/5.9a0cf2a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2IUmV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__2HFd3\",\"sorting\":\"QuoteList_sorting__1wJ32\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1J9cj\"};","import { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation, useRouteMatch } from 'react-router';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n  const match = useRouteMatch();\n\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    // history.push(match.path + '?sort=' + (isSortingAscending ? 'desc' : 'asc'));\n    history.push({\n      pathname: match.path,\n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    })\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>Sort {isSortingAscending ? 'Descending' :  'Ascending'}</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from 'react';\r\nimport QuoteList from '../components/quotes/QuoteList';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\n\r\nimport useHttp from '../hooks/use-http';\r\nimport { getAllQuotes } from '../lib/api';\r\n\r\n// const DUMMY_QUOTES = [\r\n//     { id: 'q1', author: 'Max', text: 'Learning react is fun' },\r\n//     { id: 'q2', author: 'Reyco', text: 'Learning react is fun' },\r\n//     { id: 'q3', author: 'Kezeah', text: 'Learning react is fun' }\r\n// ];\r\n\r\nconst AllQuote = () => {\r\n    const { sendRequest, status, data: loadedQuotes, error} = useHttp(getAllQuotes, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest();\r\n    }, [sendRequest]);\r\n\r\n    if(status === 'pending') {\r\n        return <div className='centered'>\r\n            <LoadingSpinner />\r\n        </div>\r\n    }\r\n\r\n    if(error) {\r\n        return <p className='centered focus'>{error}</p>\r\n    }\r\n\r\n    if(status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n        return <NoQuotesFound />\r\n    }\r\n    \r\n    return <QuoteList quotes={loadedQuotes} />\r\n};\r\n\r\nexport default AllQuote;"],"sourceRoot":""}